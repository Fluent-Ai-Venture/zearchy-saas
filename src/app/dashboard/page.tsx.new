// src/app/dashboard/page.tsx
"use client";

import { useState, useEffect, useRef, useCallback } from 'react';
import { useUser } from '@clerk/nextjs';
import { UserButton } from "@clerk/nextjs";
import TrieVisualizer from '@/components/TrieVisualizer';
import { TrieVisualizationNode } from '@/lib/ziptrie';

interface UploadedData {
  dataId: string;
  preview?: Record<string, unknown>[];
  fields: string[];
  totalRecords: number;
}

interface SearchPerformance {
  time: number;
  resultsCount: number;
}

// File upload zone component
const FileUploadZone = ({ 
  onDrop, 
  isUploading, 
  uploadError, 
  uploadStatus 
}: { 
  onDrop: (event: React.ChangeEvent<HTMLInputElement>) => Promise<void>; 
  isUploading: boolean; 
  uploadError: string | null;
  uploadStatus: string;
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  return (
    <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer">
      <input 
        type="file" 
        ref={fileInputRef}
        onChange={onDrop}
        accept=".csv,.json"
        className="hidden"
        id="file-upload"
      />
      <div className="mb-4">
        <svg
          className="mx-auto h-12 w-12 text-black"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
          />
        </svg>
      </div>
      <label htmlFor="file-upload" className="cursor-pointer">
        <span className="mt-2 block text-sm font-medium text-black">
          {isUploading ? (
            <span className="text-blue-600">{uploadStatus}</span>
          ) : (
            <span>
              <span className="text-blue-600 font-semibold">Click to upload</span> or drag and drop
            </span>
          )}
        </span>
        <span className="mt-1 block text-xs text-black">CSV or JSON up to 10MB</span>
      </label>
      {uploadError && (
        <div className="mt-2 text-sm text-red-600">{uploadError}</div>
      )}
    </div>
  );
};

export default function Dashboard() {
  const { user, isLoaded } = useUser();
  const [activeTab, setActiveTab] = useState('search');
  const [uploadedData, setUploadedData] = useState<UploadedData | null>(null);
  const [selectedFields, setSelectedFields] = useState<string[]>([]);
  const [returnableFields, setReturnableFields] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<Record<string, unknown>[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [uploadStatus, setUploadStatus] = useState('');
  const [trieData, setTrieData] = useState<TrieVisualizationNode | null>(null);
  const [searchPath, setSearchPath] = useState<TrieVisualizationNode[] | null>(null);
  const [searchPerformance, setSearchPerformance] = useState<SearchPerformance>({ time: 0, resultsCount: 0 });
  
  // We don't need to use fileInputRef directly in this component as it's passed to FileUploadZone
  const fileInputRef = useRef<HTMLInputElement>(null);
  const uploadedDataRef = useRef<UploadedData | null>(null);
  const selectedFieldsRef = useRef<string[]>([]);
  const searchQueryRef = useRef<string>('');
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  // Update refs when state changes
  useEffect(() => {
    searchQueryRef.current = searchQuery;
  }, [searchQuery]);
  
  useEffect(() => {
    uploadedDataRef.current = uploadedData;
    
    // Set returnable fields when data is uploaded
    if (uploadedData && uploadedData.fields) {
      setReturnableFields(uploadedData.fields);
    }
  }, [uploadedData]);
  
  useEffect(() => {
    selectedFieldsRef.current = selectedFields;
  }, [selectedFields]);
  
  // Handle file uploads
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    try {
      setIsUploading(true);
      setUploadError(null);
      
      const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
      console.log(`Uploading file: ${file.name} (${fileSizeMB} MB)`);
      
      // Create upload status message
      setUploadStatus(`Uploading ${file.name} (${fileSizeMB} MB)...`);
      
      const formData = new FormData();
      formData.append('file', file);
      
      // Set up timeout to provide feedback for large files
      const uploadStartTime = Date.now();
      const uploadStatusInterval = setInterval(() => {
        const elapsedSeconds = Math.floor((Date.now() - uploadStartTime) / 1000);
        setUploadStatus(`Processing ${file.name} (${fileSizeMB} MB)... ${elapsedSeconds}s elapsed`);
      }, 1000);
      
      // First, parse the file on the server
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      });
      
      clearInterval(uploadStatusInterval);
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to upload file');
      }
      
      // Calculate initial processing time
      const initialProcessingTime = ((Date.now() - uploadStartTime) / 1000).toFixed(1);
      setUploadStatus(`Parsed ${data.totalRecords.toLocaleString()} records in ${initialProcessingTime} seconds. Ready for search!`);
      
      // Set the uploaded data
      setUploadedData({
        dataId: data.dataId,
        preview: data.data.slice(0, 10),
        fields: data.allFields,
        totalRecords: data.totalRecords
      });
      
      // Auto-select all fields for search
      setSelectedFields(data.allFields);
      setReturnableFields(data.allFields);
      
      // Switch to search tab
      setActiveTab('search');
      
    } catch (error) {
      console.error('Upload error:', error);
      setUploadError(error instanceof Error ? error.message : 'An error occurred during upload');
    } finally {
      setIsUploading(false);
    }
  };
  
  // Simple debounced search function
  const performSearch = useCallback(() => {
    const query = searchQueryRef.current;
    const data = uploadedDataRef.current;
    const fields = selectedFieldsRef.current;
    
    if (!query) {
      setSearchResults([]);
      return;
    }
    
    // Continue with search even if dataId is missing - the API will handle this
    if (!data?.dataId) {
      console.warn('No data ID available for search, but continuing anyway');
      // We'll continue with the search and let the API handle it
    }
    
    setIsSearching(true);
    setUploadError(null);
    
    const doSearch = async () => {
      try {
        // Clear any previous errors
        setUploadError(null);
        
        const startTime = performance.now();
        
        // Validate query
        if (!query || query.trim() === '') {
          console.log('Empty search query, skipping search');
          setSearchResults([]);
          setTrieData(null);
          setSearchPath(null);
          return;
        }
        
        // Log search attempt for debugging
        console.log('Attempting search with query:', query);
        console.log('Current data state:', { 
          hasData: !!data, 
          dataId: data?.dataId || 'none',
          selectedFields: fields || [] 
        });
        
        // Construct search URL with current values from refs
        let searchUrl = `/api/search?q=${encodeURIComponent(query)}`;
        
        // Add dataId if available
        if (data?.dataId) {
          searchUrl += `&dataId=${encodeURIComponent(data.dataId)}`;
        }
        
        // Only add fields if they are selected
        if (fields && fields.length > 0) {
          searchUrl += `&fields=${encodeURIComponent(fields.join(','))}`;
        }
        
        console.log('Searching with URL:', searchUrl);
        const response = await fetch(searchUrl);
        const searchData = await response.json();
        
        const endTime = performance.now();
        const searchTimeMs = endTime - startTime;
        
        console.log('Search response:', searchData);
        
        // Check for error message in the response
        if (searchData.message && !searchData.results) {
          console.warn('Search API returned a message:', searchData.message);
          setUploadError(searchData.message);
          setSearchResults([]);
          return;
        }
        
        if (response.ok) {
          if (searchData.results && Array.isArray(searchData.results)) {
            // Set search results
            setSearchResults(searchData.results);
            
            // Update performance metrics
            setSearchPerformance({
              time: searchTimeMs,
              resultsCount: searchData.results.length
            });
            
            // Make sure returnable fields are set for displaying results
            if (searchData.results.length > 0) {
              // Get fields from the first result
              const firstResult = searchData.results[0];
              // Use all fields except special ones
              const fields = Object.keys(firstResult).filter(key => !['score', '__typename'].includes(key));
              
              console.log('Fields from result:', fields);
              
              if (fields.length > 0) {
                setReturnableFields(fields);
              } else if (data && data.fields) {
                // Fallback to using the fields from the uploaded data
                setReturnableFields(data.fields);
              }
            } else if (data && data.fields) {
              // Fallback to using the fields from the uploaded data
              setReturnableFields(data.fields);
            }
            
            // Update visualization if available
            if (searchData.trieVisualization) {
              console.log('Setting trie visualization data');
              setTrieData(searchData.trieVisualization);
            } else {
              console.warn('No trie visualization data received');
              setTrieData(null);
            }
            
            if (searchData.searchPath) {
              console.log('Setting search path data, length:', searchData.searchPath.length);
              setSearchPath(searchData.searchPath);
            } else {
              console.warn('No search path data received');
              setSearchPath(null);
            }
            
            // Clear any previous errors if search was successful
            setUploadError(null);
          } else {
            console.error('Invalid search results format:', searchData);
            setSearchResults([]);
            setUploadError('Invalid search results format received from server');
          }
        } else {
          throw new Error(searchData.error || 'Search failed');
        }
      } catch (error) {
        console.error('Search error:', error);
        setUploadError(error instanceof Error ? error.message : 'An error occurred during search');
        setSearchResults([]);
        setTrieData(null);
        setSearchPath(null);
      } finally {
        setIsSearching(false);
      }
    };
    
    doSearch();
  }, []);
  
  // Debounce search input
  useEffect(() => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    
    searchTimeoutRef.current = setTimeout(() => {
      performSearch();
    }, 300);
    
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, [searchQuery, performSearch]);
  
  // Save field configuration
  const saveFieldConfiguration = async () => {
    if (!uploadedData) return;
    
    console.log('Saving field configuration:', selectedFields);
    
    // Switch to search tab after saving
    setActiveTab('search');
  };

  // Handle downloading the ZipTrie data
  const handleDownloadData = async () => {
    try {
      setIsSearching(true); // Reuse the loading state
      
      console.log('Downloading ZipTrie data...');
      const response = await fetch('/api/download');
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to download data');
      }
      
      const data = await response.json();
      
      // Create a downloadable JSON file
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      // Create a link and trigger the download
      const a = document.createElement('a');
      a.href = url;
      a.download = `zearchy-data-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('Download complete');
    } catch (error) {
      console.error('Download error:', error);
      setUploadError(error instanceof Error ? error.message : 'An error occurred during download');
    } finally {
      setIsSearching(false);
    }
  };
  
  return (
    <main className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="py-6">
          <div className="flex justify-between items-center">
            <h1 className="text-3xl font-bold text-black">Zearchy Search Platform</h1>
            <div className="flex items-center space-x-4">
              {isLoaded && user && (
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-black">{user.primaryEmailAddress?.emailAddress}</span>
                  <UserButton afterSignOutUrl="/" />
                </div>
              )}
            </div>
          </div>
          
          <div className="mt-6 bg-white shadow overflow-hidden sm:rounded-lg">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex">
                <button
                  onClick={() => setActiveTab('upload')}
                  className={`${
                    activeTab === 'upload'
                      ? 'border-blue-500 text-black'
                      : 'border-transparent text-black hover:text-black hover:border-gray-300'
                  } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
                >
                  Upload Data
                </button>
                <button
                  onClick={() => setActiveTab('search')}
                  className={`${
                    activeTab === 'search'
                      ? 'border-blue-500 text-black'
                      : 'border-transparent text-black hover:text-black hover:border-gray-300'
                  } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
                >
                  Search
                </button>
                <button
                  onClick={() => setActiveTab('api')}
                  className={`${
                    activeTab === 'api'
                      ? 'border-blue-500 text-black'
                      : 'border-transparent text-black hover:text-black hover:border-gray-300'
                  } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
                >
                  API Access
                </button>
              </nav>
            </div>
            
            <div className="p-6">
              {activeTab === 'upload' && (
                <div>
                  <h2 className="text-xl font-semibold text-black mb-4">Upload Data</h2>
                  <p className="text-black mb-6">
                    Upload your JSON or CSV data to begin searching with our high-performance ZipTrie engine.
                  </p>
                  
                  <FileUploadZone
                    onDrop={handleFileUpload}
                    isUploading={isUploading}
                    uploadError={uploadError}
                    uploadStatus={uploadStatus}
                  />
                  
                  {uploadedData && (
                    <div className="mt-8">
                      <h3 className="text-lg font-semibold text-black mb-2">Data Preview</h3>
                      <div className="overflow-auto max-h-96 border rounded-md">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              {uploadedData.fields.map((field) => (
                                <th
                                  key={field}
                                  scope="col"
                                  className="px-6 py-3 text-left text-xs font-medium text-black uppercase tracking-wider"
                                >
                                  {field}
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {uploadedData.preview && uploadedData.preview.map((row, rowIndex) => (
                              <tr key={rowIndex}>
                                {uploadedData.fields.map((field) => (
                                  <td key={field} className="px-6 py-4 whitespace-nowrap text-sm text-black">
                                    {row[field] !== undefined ? String(row[field]) : ''}
                                  </td>
                                ))}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                      
                      <div className="mt-6">
                        <h3 className="text-lg font-semibold text-black mb-2">Configure Search Fields</h3>
                        <p className="text-sm text-black mb-4">
                          Select which fields should be searchable. By default, all fields are selected.
                        </p>
                        
                        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 mb-4">
                          {uploadedData.fields.map((field) => (
                            <div key={field} className="flex items-center">
                              <input
                                id={`field-${field}`}
                                type="checkbox"
                                className="h-4 w-4 text-blue-600 border-gray-300 rounded"
                                checked={selectedFields.includes(field)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setSelectedFields((prev) => [...prev, field]);
                                  } else {
                                    setSelectedFields((prev) => prev.filter((f) => f !== field));
                                  }
                                }}
                              />
                              <label
                                htmlFor={`field-${field}`}
                                className="ml-2 block text-sm text-black"
                              >
                                {field}
                              </label>
                            </div>
                          ))}
                        </div>
                        
                        <button
                          onClick={saveFieldConfiguration}
                          className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                        >
                          Save Configuration
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {activeTab === 'search' && (
                <div>
                  <h2 className="text-xl font-semibold text-black mb-4">Search</h2>
                  <p className="text-black mb-6">
                    Search your uploaded data using our high-performance ZipTrie search engine.
                  </p>
                  
                  <div className="mb-6">
                    <div className="flex space-x-2">
                      <div className="relative flex-grow">
                        <input
                          type="text"
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          placeholder="Enter search term..."
                          className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-black"
                        />
                        {isSearching && (
                          <div className="absolute right-3 top-2">
                            <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                          </div>
                        )}
                      </div>
                      
                      {/* Download Button */}
                      <button
                        onClick={handleDownloadData}
                        className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 flex items-center"
                        disabled={!uploadedData}
                        title={!uploadedData ? "Upload data first" : "Download ZipTrie data for offline use"}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                        </svg>
                        Download
                      </button>
                    </div>
                    
                    {uploadError && (
                      <div className="mt-2 text-sm text-red-600">{uploadError}</div>
                    )}
                  </div>
                  
                  {/* Search Results */}
                  {searchResults.length > 0 && (
                    <div className="mt-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-lg font-semibold text-black">Search Results ({searchResults.length})</h3>
                        
                        <div className="flex space-x-2 items-center">
                          {/* Performance Metrics */}
                          {searchPerformance.time > 0 && (
                            <div className="text-sm text-black bg-blue-50 px-3 py-1 rounded-md">
                              <span className="font-medium">Search Time:</span> {searchPerformance.time.toFixed(2)}ms | 
                              <span className="font-medium"> Speed:</span> {(searchPerformance.resultsCount / (searchPerformance.time / 1000)).toFixed(0)} results/second
                              {uploadedData && uploadedData.totalRecords > 10000 && (
                                <span className="ml-2 text-green-600 font-medium">🚀 High Performance</span>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {/* Search Results Grid */}
                      <div className="overflow-auto max-h-96 p-4 border rounded-md bg-white mb-6">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                          {searchResults.map((result, index) => (
                            <div key={index} className="bg-gray-50 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200">
                              {returnableFields.map((field) => (
                                <div key={field} className="mb-2">
                                  <span className="text-xs font-medium text-gray-500 uppercase">{field}:</span>
                                  <div className="text-sm text-black font-medium truncate">
                                    {String(result[field] || '')}
                                  </div>
                                </div>
                              ))}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* ZipTrie Visualization */}
                  <div className="mt-8">
                    {trieData && (
                      <TrieVisualizer 
                        treeData={trieData} 
                        searchPath={searchPath} 
                        searchQuery={searchQuery} 
                      />
                    )}
                    {!trieData && searchQuery && !isSearching && (
                      <div className="bg-gray-50 p-4 rounded-md text-black text-base border border-gray-200">
                        No visualization data available for this search.
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {activeTab === 'api' && (
                <div>
                  <h2 className="text-xl font-semibold text-black mb-4">API Access</h2>
                  <p className="text-black mb-6">
                    Access your search data programmatically using our REST API.
                  </p>
                  
                  <div className="mb-6">
                    <h3 className="text-md font-medium text-black mb-2">Your API Key</h3>
                    <div className="flex">
                      <input
                        type="password"
                        readOnly
                        value="••••••••••••••••••••••"
                        className="flex-grow px-3 py-2 border border-gray-300 rounded-l-md shadow-sm bg-gray-50"
                      />
                      <button className="bg-gray-200 text-black px-4 py-2 rounded-r-md hover:bg-gray-300">
                        Show
                      </button>
                    </div>
                    <div className="mt-2 flex gap-2">
                      <button className="text-sm text-blue-600 hover:text-blue-800">
                        Regenerate
                      </button>
                      <button className="text-sm text-red-600 hover:text-red-800">
                        Revoke
                      </button>
                    </div>
                  </div>
                  
                  <div className="mb-6">
                    <h3 className="text-md font-medium text-black mb-2">API Endpoint</h3>
                    <code className="block bg-gray-50 p-3 rounded-md text-sm text-black">
                      https://api.zearchy.com/v1/search?q=your_query
                    </code>
                  </div>
                  
                  <div>
                    <h3 className="text-md font-medium text-black mb-2">Example Usage</h3>
                    <div className="bg-gray-800 text-white p-3 rounded-md text-sm font-mono overflow-x-auto">
                      <pre>{`fetch('https://api.zearchy.com/v1/search?q=example', {
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY'
  }
})
.then(response => response.json())
.then(data => console.log(data));`}</pre>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
